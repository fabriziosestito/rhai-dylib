//! # Loader.
//!
//! A [`Loader`] is a simple trait that will be used to load a rhai module from a path.

/// A loader using the [`libloading`](https://github.com/nagisa/rust_libloading) crate.
#[cfg(feature = "libloading")]
pub mod libloading;

/// Error generated by a loader.
#[derive(Debug)]
pub enum LoaderError {
    /// Error generated while loading a module.
    Loading(String),
}

impl Into<Box<rhai::EvalAltResult>> for LoaderError {
    fn into(self) -> Box<rhai::EvalAltResult> {
        match self {
            LoaderError::Loading(error) => format!("Error while loading a module: {error}").into(),
        }
    }
}

/// A trait to implement an object that loads Rhai modules.
pub trait Loader {
    /// Load a module from a path and apply it to a [`rhai::Engine`].
    fn load(
        &mut self,
        path: impl AsRef<std::path::Path>,
    ) -> Result<rhai::Shared<rhai::Module>, LoaderError>;
}
